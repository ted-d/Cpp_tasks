/*Объявите класс с именем Vector3D, содержащий следующие элементы:

- приватные переменные:

    int x, y, z; // координаты в трехмерном пространстве

- публичные методы:

    void set_coords(int a, int b, int c); // заносит в поля x, y, z значения a, b, c
    void get_coords(int& x, int& y, int& z); // возвращает (через ссылки) значения координат

При реализации метода set_coords необходимо выполнить проверку, что передаваемые координаты a, b, c находятся в диапазоне [-100; 100].
Если хотя бы одна координата выходит из этого диапазона, то поля x, y, z меняться не должны (присваивать ничего не нужно).

В функции main создайте через метод new два объекта класса Vector3D, на которые должны вести указатели ptr_v1, ptr_v2. Занесите в эти объекты координаты:

ptr_v1: 10, -5, 7
ptr_v2: 0, 12, -56

В конце функции main не забудьте освободить ранее выделенную память.

P.S. На экран ничего выводить не нужно.*/
#include <iostream>

// здесь объявляйте класс
class Vector3D{
   int x, y, z;
   public:    
    void set_coords(int a, int b, int c){
        if(a>=-100&&a<=100&&b>=-100&&b<=100&&c>=-100&&c<=100){
        x=a;
        y=b;
        z=c;}
    }
    void get_coords(int& x, int& y, int& z){
       x=this->x;
       y=this->y;
       z=this->z;
    }

};
int main(void)
{
    // здесь продолжайте функцию main
    Vector3D* ptr_v1 = new Vector3D;
    Vector3D* ptr_v2 = new Vector3D;
    ptr_v1->set_coords(10, -5, 7);
    ptr_v2->set_coords(0, 12, -56);
    __ASSERT_TESTS__ // макроопределение для тестирования (не убирать и должно идти непосредственно перед return 0 или перед освобождением памяти)
    delete ptr_v1,ptr_v2;
    
    // здесь освобождайте память

    return 0;
}
